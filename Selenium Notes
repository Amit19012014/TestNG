Day 21
-------

Selenium WebDriver
====================

1) WebDriver is one of the component in selenium.
2) webDriver is a java Interface
3) WebDriver is an API (Application Programming Interface)

WebDriver (I)---->  RemoteWebDriver (C)----> ChromeDriver , FirefoxDriver , EdgeDriver etc.....


Day 22
---------

Locators (ID,Name,LinkText,PartialLinkText,Class&Tag)
====================================================

We can identify various elements on the web using Locators
Locators are addresses that identify a web element uniquely within the page

Locators
=========
ID,
Name,
LinkText, - we need to write full text
PartialLinkText - write Partial text
Class&Tag - use to collect group of element

Customized Locators
====================
CSS Selector
-------------
Tag and ID
Tag and class
Tag and attribute
Tag class and attribute

Xpath
-------------
Absolute xpath
Relative xpath

driver.findelement(By.id("")).click()

findElement() - will return single Webelement
findElements() - will return multiple Webelements


Scenario 1 : Locator matching with single web element

findElement(loc) ---> single web element --- Web-element
findElements(loc) ----> single web element List<WebElement>

Scenario 2 : Locator matching with multiple web elements
findElement(loc) ---> single web element --- Web-element
findElements(loc) ----> multiple web element List<WebElement>

Scenario 3 : Locator is not matching with any web elements
findElement(loc) ---> NoSuchElementException
findElements(loc) ----> return 0. because List<WebElement> will not find any element so it is 0. Empty list will be created.


Day 23
---------
Locators - CSS Selector
=======================

CSS - Cascading Style Sheets

tag id                        tag#id
tag class                     tag.class_name
tag attribute                 tag[attribute = "value"]
tag class attribute           tag.class_name[attribute = "value"]



Day 24
---------
(XML Language)

Locators -  XPath | XPath Functions | XPath
============================================
Xpath is an address of the element
DOM - Document object model

type of
=============
1)absolute Xpath (Full Xpath)

    Ex: /html/body/div[6]/div[1]/div[2]/div[2]/form/button

2)relative Xpath (Partial Xpath)

    Ex: //*[@id="small-search-box-form"]/button

Which Xpath will be preferred?
Relative Xpath

Difference B/W Absolute & Relative Xpath
-----------------------------------------

Difference between Absolute & Relative Xpaths?
1) Absolute xpath starts with / ---> represents root node
   Relative xpath starts with //

2) Absolute xpath do not use attributes
   Relative xpath works with attribute

3) Absolute xpath traverse through each node till it finds element
   Relative xpath directly jump and find the element by using attribute

Relative Xpath (Partial Xpath)
--------------------------------

1)Automatically ( By Dev tools, selector hub)
2)Manually (OWN Xpath)

Syntax
---------
//tagname[@attribute='value']
//*[@attribute='value']


Example 1
---------
//img[@title='MacBook']
//*[@title='MacBook']

//*[@title=/"MacBook"/]



//Xpath with single Attribute
-----------------------------
driver.findElement(By.xpath("//input[@placeholder='Search']")).sendKeys("Amit");

//Xpath with multiple Attribute
-------------------------------
driver.findElement(By.xpath("//input[@name='search'][@placeholder='Search']")).sendKeys("Amit");

Xpath with 'and' & 'or' operators
------------------------------
//input[@name='search' and @placeholder='Search']
//input[@name='search' or @placeholder='Search']

Xpath with inner text ---text()
-------------------------------
Syntax
//tagname[text() ='innerText']

//a[text()='Desktop'];
//a[text()='MacBook'];

<a href="https://xyz.com"> Click me </a>

linktext  - yes
innertext - yes

<div>welcome</div>

linktext  - no
innertext - yes

Xpath with Contains()
=====================
it will check the keyword anywhere on the webpage
//input[contains(.,'Sea')] here (.) is  text() method
//input[contains(@placeholder,'Sea')]

Xpath with start-with()
=======================
it will check the keyword from the starting.
//input[starts-with(@placeholder,'Sea')]

Handling Dynamic attributes
============================

//*[@id='start' or @id='stop']
//*[contains(@id,'st')]
//*[starts-with(@id,'st')]


name = xyz001 xyz002  xyz003 xyz004
//*[contains(@name,'xyz')]
//*[starts-with(@name,'xyz')]

//*[contains(@name,'00')]

name = 1xyz 2xyz 3xyz 4xyz 5xyz

//*[contains(@name,'xyz')]

name = 101xyz 201xyz 301xyz 401xyz

//*[contains(@name,'xyz')]

Chained Xpath
==============
the combination of absolute and relative Xpath is called chained Xpath

Example :

//div[@class='col-sm-4']/div/h1/a[contains(text(),'Your Store')]
