Day 21
=======
Selenium WebDriver
========================================================================================================================

1) WebDriver is one of the component in selenium.
2) webDriver is a java Interface
3) WebDriver is an API (Application Programming Interface)

WebDriver (I)---->  RemoteWebDriver (C)----> ChromeDriver , FirefoxDriver , EdgeDriver etc.....


Day 22
========
Locators (ID,Name,LinkText,PartialLinkText,Class&Tag)
========================================================================================================================

We can identify various elements on the web using Locators
Locators are addresses that identify a web element uniquely within the page

Locators
=========
ID,
Name,
LinkText, - we need to write full text
PartialLinkText - write Partial text
Class&Tag - use to collect group of element

Customized Locators
====================
CSS Selector
-------------
Tag and ID
Tag and class
Tag and attribute
Tag class and attribute

Xpath
-------------
Absolute xpath
Relative xpath

driver.findelement(By.id("")).click()

findElement() - will return single Webelement
findElements() - will return multiple Webelements


Scenario 1 : Locator matching with single web element

findElement(loc) ---> single web element --- Web-element
findElements(loc) ----> single web element List<WebElement>

Scenario 2 : Locator matching with multiple web elements
findElement(loc) ---> single web element --- Web-element
findElements(loc) ----> multiple web element List<WebElement>

Scenario 3 : Locator is not matching with any web elements
findElement(loc) ---> NoSuchElementException
findElements(loc) ----> return 0. because List<WebElement> will not find any element so it is 0. Empty list will be created.


Day 23
---------
Locators - CSS Selector
========================================================================================================================

CSS - Cascading Style Sheets

tag id                        tag#id
tag class                     tag.class_name
tag attribute                 tag[attribute = "value"]
tag class attribute           tag.class_name[attribute = "value"]



Day 24
==========
(XML Language)

Locators -  XPath | XPath Functions | XPath
========================================================================================================================
Xpath is an address of the element
DOM - Document object model

type of
=============
1)absolute Xpath (Full Xpath)

    Ex: /html/body/div[6]/div[1]/div[2]/div[2]/form/button

2)relative Xpath (Partial Xpath)

    Ex: //*[@id="small-search-box-form"]/button

Which Xpath will be preferred?
Relative Xpath

Difference B/W Absolute & Relative Xpath
-----------------------------------------

Difference between Absolute & Relative Xpaths?
1) Absolute xpath starts with / ---> represents root node
   Relative xpath starts with //

2) Absolute xpath do not use attributes
   Relative xpath works with attribute

3) Absolute xpath traverse through each node till it finds element
   Relative xpath directly jump and find the element by using attribute

Relative Xpath (Partial Xpath)
--------------------------------

1)Automatically ( By Dev tools, selector hub)
2)Manually (OWN Xpath)

Syntax
---------
//tagname[@attribute='value']
//*[@attribute='value']


Example 1
---------
//img[@title='MacBook']
//*[@title='MacBook']

//*[@title=/"MacBook"/]



//Xpath with single Attribute
-----------------------------
driver.findElement(By.xpath("//input[@placeholder='Search']")).sendKeys("Amit");

//Xpath with multiple Attribute
-------------------------------
driver.findElement(By.xpath("//input[@name='search'][@placeholder='Search']")).sendKeys("Amit");

Xpath with 'and' & 'or' operators
------------------------------
//input[@name='search' and @placeholder='Search']
//input[@name='search' or @placeholder='Search']

Xpath with inner text ---text()
-------------------------------
Syntax
//tagname[text() ='innerText']

//a[text()='Desktop'];
//a[text()='MacBook'];

<a href="https://xyz.com"> Click me </a>

linktext  - yes
innertext - yes

<div>welcome</div>

linktext  - no
innertext - yes

Xpath with Contains()
=====================
it will check the keyword anywhere on the webpage
//input[contains(.,'Sea')] here (.) is  text() method
//input[contains(@placeholder,'Sea')]

Xpath with start-with()
=======================
it will check the keyword from the starting.
//input[starts-with(@placeholder,'Sea')]

Handling Dynamic attributes
============================

//*[@id='start' or @id='stop']
//*[contains(@id,'st')]
//*[starts-with(@id,'st')]


name = xyz001 xyz002  xyz003 xyz004
//*[contains(@name,'xyz')]
//*[starts-with(@name,'xyz')]

//*[contains(@name,'00')]

name = 1xyz 2xyz 3xyz 4xyz 5xyz

//*[contains(@name,'xyz')]

name = 101xyz 201xyz 301xyz 401xyz

//*[contains(@name,'xyz')]

Chained Xpath
==============
the combination of absolute and relative Xpath is called chained Xpath

Example :

//div[@class='col-sm-4']/div/h1/a[contains(text(),'Your Store')]




Day 25
==========
Locators - XPath Axes | SelectorsHub
========================================================================================================================

XPath Axes :
------------

child – Selects all direct children of the current node.

parent – Selects the parent of the current node.

ancestor – Selects all ancestors (parent, grandparent, etc.) of the current node.

ancestor-or-self – Selects the current node and all its ancestors.

descendant – Selects all descendants (children, grandchildren, etc.) of the current node.

descendant-or-self – Selects the current node and all its descendants.

following – Selects all nodes after the current node in the document.

following-sibling – Selects all siblings after the current node.

preceding – Selects all nodes before the current node in the document.

preceding-sibling – Selects all siblings before the current node.

self – Selects the current node itself.

attribute – Selects all attributes of the current node.

namespace – Selects all namespace nodes of the current node (rarely used).

XPath Axes - Definitions and Examples
=====================================

Sample HTML Structure:
----------------------
<html>
  <body>
    <div>
      <h1>Title</h1>
      <p>Paragraph 1</p>
      <p>Paragraph 2</p>
      <span>Note</span>
    </div>
  </body>
</html>

Axes List:
----------
1. self
    - Description: Selects the current node itself
    - Example: //h1/self::h1
    - Selects: The <h1> node

2. child
   - Description: Selects direct children of the current node
   - Example: //div/child::p
   - Selects: <p>Paragraph 1</p>, <p>Paragraph 2</p>

3. parent
   - Description: Selects the parent of the current node
   - Example: //span/parent::div
   - Selects: <div> that contains the <span>

4. descendant
   - Description: Selects all descendants (children, grandchildren, etc.)
   - Example: //div/descendant::p
   - Selects: All <p> elements inside <div>

5. ancestor
   - Description: Selects all ancestors (parent, grandparent, etc.)
   - Example: //p/ancestor::div
   - Selects: The <div> wrapping the <p>

6. following
   - Description: Selects all nodes after the current node in the document
   - Example: //h1/following::p
   - Selects: All <p> elements after <h1>

7. following-sibling
   - Description: Selects siblings after the current node
   - Example: //h1/following-sibling::p
   - Selects: <p>Paragraph 1</p>, <p>Paragraph 2</p>

8. preceding
   - Description: Selects all nodes before the current node in the document
   - Example: //span/preceding::h1
   - Selects: <h1> before <span>

9. preceding-sibling
    - Description: Selects siblings before the current node
    - Example: //p[2]/preceding-sibling::p
    - Selects: <p>Paragraph 1</p>



Day 26
==========

WebDriver Methods
========================================================================================================================



1) get methods :- we can access these methods through WebDriver instance.
==============
get(url) opens the url on the browser
getTitle() returns title of the page
getCurrentUrl() returns URL of the page
getPageSource() returns source code of the page
getWindowHandle() returns ID of the single Browser window
getWindowHandles() returns ID's of the multiple browser windows

2) conditional methods :- access these commands through WebElement
======================
returns boolean value(true/false)

isDisplayed() - We can check display status of internet
isEnable() - we can check enable/disable status of the element/operational element.
isSelected() - we can use to check the element is selected or not.


3) browser methods
==================

close() - close single browser window wherever driver is focused
quit() - close multiple browsers windows


4) navigational methods
=======================



Assignments - https://testautomationpractice.blogspot.com/


Day 27
======

Wait methods (commands)
========================================================================================================================

Synchronization -

Thread.sleep() - it is java command

1)Implicit wait
2)Explicit wait / fluent wait


NoSuchElementException - Element is not present on the page. Synchronization Problem.
ElementNotFoundException - Locator is incorrect



Thread.sleep()
===============
Advantage

1) easy to use

Disadvantage

1) if the time is not sufficient then you will get exception
2) it will wait for maximum time out. this will reduce the performance script.
3) multiple times

1)Implicit wait
==================
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

Advantage
==========

1) single time/one statement
2) it will not wait till maximum time if the element is available
3) Applicable for all the elements
4) easy to use

Disadvantage:
===========

1) if the time is not sufficient then you will get exception


2) Explicit wait
===================

declaration
use


1) Conditional based, it will work more effectively.
2) finding element is inclusive( for some conditions)
3) it will wait for condition to be true, then consider the time
4) we need to write multiple statements for multiple elements


conditions
===============

alertlsPresent()
elementSelectionStateToBe() elementToBeClickable()
elementToBeSelected()
frameToBeAvaliableAndSwitchTolt()
presenceOfAllElementsLocatedBy()
presenceOfElementLocated()
textToBePresentinElement()
textToBePresentinElementLocated()
textToBePresentInElementValue()
titlels()
titleContains()
visibilityOf()
visibilityOfAllElements()
visibilityOfAllElementsLocatedBy()
visibilityOfElementLocated()

fluent wait
==============

  // Waiting 30 seconds for an element to be present on the page, checking
   // for its presence once every 5 seconds.
   Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
       .withTimeout(Duration.ofSeconds(time))
       .pollingEvery(Duration.ofSeconds(time))
       .ignoring(NoSuchElementException.class);

   WebElement foo = wait.until(new Function<WebDriver, WebElement>() {
     public WebElement apply(WebDriver driver) {
       return driver.findElement(By.id("foo"));
     }
   });



Day 28
==========
WebDriver Methods | Browser & Navigation Commands
========================================================================================================================


Navigation Commands
====================

navigate().to(url)
navigate().back()
navigate().forward()
navigate().refresh()


driver.get() -->  Accepts URL only in the String format.
driver.navigate().to(myURL); --> Accept only URL in the String format & URl Object format.


getWindowHandle()
getWindowHandles()

driver.switchTo().window(windowID);


Assignment
https://testautomation practice.blogspot.com/
1) provide some string search for it 2) count number of links
3) click on each link using for loop
4) get window ID's for every browser window 5) close specific browser window

Day 29
==========
Selenium with Java | Handling Check Boxes, Different Types of Alerts
========================================================================================================================

Checkboxes

Alerts/popups
-------------
 Alert myalert = driver.switchTo().alert();

driver.switchTo().alert().accept();
driver.switchTo().alert().accept(); // close alert button using ok button
driver.switchTo().alert().dismiss();// close alert button using cancel button
driver.switchTo().alert().getText();
driver.switchTo().alert().sendKeys("Amit") // to send the text in prompt.

Authenticated popup
-------------------
https://the-internet.herokuapp.com/basic_auth

Syntax:
http://username:password@the-internet.herokuapp.com/basic_auth
Example :
http://admin:admin@the-internet.herokuapp.com/basic_auth


Day-30
========

frames/iframes
========================================================================================================================
Syntax:
driver.switchTo().frame(parameter) - parameter can be id ,name and webElement

Testing Website:
https://ui.vision/demo/webtest/frames/

driver.switchTo().frame(name) - parameter can be id ,name and webElement
driver.switchTo().frame(id)
driver.switchTo().frame(WebElement)
driver.switchTo().frame(Index)

Command: to come out the frame

driver.switchTo().defaultContent();


3 types of switching methods

1) browser windows
        driver.switch To().window(windowID/window handle)

2) alerts
    driver.switchTo().alert()
    driver.switchTo().accept()
    driver.switchTo().dismiss()

3) frames
    driver.switchTo().frame(id);
    driver.switchTo().frame(name);
    driver.switchTo().frame(WebElement);


Day 31
========
Handling Different Types of Drop-downs
========================================================================================================================

Dropdown box
------------
1) select dropdown
2) Bootstrap dropdown
3) hidden dropdown

1) select dropdown
-------------------
select
ex: first convert into select tag
       WebElement fromport = driver.findElement(By.xpath("//select[@name='fromPort']"));
       Select select = new Select(fromport);
       select.selectByVisibleText("Portland");

selectByVisibleText()
selectByValue()
selectByIndex()

getOptions() -- return all the options from the dropdown as a Webelement.

ex :  List<WebElement> Options = drpCountry.getOptions();


2) Bootstrap dropdown
--------------------------
It will be handled by xpath

3) hidden dropdown
-------------------------
To handle the hidden dropdown we need to go to in dev tools on page then event Listeners then delete the "Blur" from that dropdown which is hidden
inspect the page=>dev tools=> event Listeners=>delete the "Blur"


Assignment
1) Handle country dropdown with/without using Select class:
https://phppot.com/demo/jquery-dependent-dropdown-list-countries-and-states/
a) count total number of options
b) print all the options
c) select one option

2) Hidden dropdown
Login to OrangeHRM--> pim--> employee status

3) https://testautomationpractice.blogspot.com/
colors mult select box


Day 32
=========
Handling Auto-suggest Dropdown & Static Web Tables
========================================================================================================================

Web Tables
------------
1) Static web tables
2) dynamic web tables
3) table with pagination

https://testautomationpractice.blogspot.com/
https://opensource-demo.orangehrmlive.com/web/index.php/admin/viewSystemUsers

Assignment:

1) htpps://blazedemo.com/


Day 33
==========
Handling Dynamic Pagination Web Table
========================================================================================================================

How to get no of pages : throw this text


String s = "Showing 1 to 20 of 1456 (73 Pages)"

s.indexOf("(")+1
s.indexOf("Pages")-1

s.subString(s.indexOf("(")+1,s.indexOf("Pages")-1) -->> 1909.
to get the string into number
int Pages = Integer.parseInt(s.substring(s.indexOf("(")+1,s.indexOf("Pages")-1));


Day 34
========
Handling Date Pickers
========================================================================================================================

2022

expected month - April

expected month<current month = Past
expected month>current month = Future


Assignment
1) Auto suggestions & Date pickers
https://dummy-tickets.com/buyticket

2) https://www.dummyticket.com/dummy-ticket-for-visa-application/1


Day 35
========
Mouse Action || Action vs Actions
========================================================================================================================



Mouse hover : moveToElement(element)
right click : contextClick(element)
double click : doubleClick(element)
drag and drop :


Actions (class) - pre defined class provided in selenium
-------------
https://demo.opencart.com.gr/


build() - create an action
perform() - complete an action

Actions actions = new Actions(driver);

Mouse hover : moveToElement(element) :
-----------------------------------
Ex-actions.moveToElement(Desktops).moveToElement(Mac).click().build().perform();

right click : contextClick(element) :
------------------------------------
Ex-actions.contextClick(rightClick).perform();

double click : doubleClick(element) :
------------------------------------
Ex - action.doubleClick(button).build().perform();



getText() Vs getAttribute("attribute_Value")
-----------------------------------------------

<input id ="xyz"> Welcome </input>
getText() --> returns the inner text ---- Welcome
getAttribute("id") --- return the value of attribute -> xyz


<input value ="welcome"></input>
getAttribute("value") --> Welcome

Actions vs Action
===================

Actions - it is a class, will be used to perform mouse actions
Action -it is an interface , will be used to store created actions.


Assignment :
1 - Drag & Drop
https://testautomationpractice.blogspot.com/


Day 36
========
Keyboard Actions | Sliders | Tabs & Windows
========================================================================================================================


Slider :
---------------
dragAndDropBy(Element,x,y)

Keyboard Action using Actions class
------------------------------------
keyDown()
keyUp()

EX : crtl+shift+A
actions.keyDown(Keys.CONTROL).keyDown(Keys,SHIFT).sendKeys("A").keyUP(Keys.SHIFT).keyUp(Keys.CONTROL).perform();

Ex- Enter
actions.keyDown(keys.ENTER).KeyUp(keys.ENTER).perform();


Day 37
========
JavascriptExecutor |Scrolling Pages|Upload Files
========================================================================================================================


JavascriptExecutor
--------------------

JavascriptExecutor is an Interface which is implemented by RemoteWebDriver class.
----------------
executeScript() :- we can execute javascript statements.

senKeys() - js.executeScript("arguments[0].setAttribute('value','John')",inputbox);
click() - js.executeScript("arguments[0].click()",radiobtn);

(element intercepted exception)

TypeCasting: JavascriptExecutor js = (JavascriptExecutor) driver;


Scrolling :
===================

JavascriptExecutor js = (JavascriptExecutor) driver;

1 -Scroll down the page by pixel number.
----------------------------------------
js.executeScript("window.scrollBy(0,1500)","");
System.out.println(js.executeScript("return window.pageYOffset;"));

2 Scroll the page till element is visible
------------------------------------------
WebElement element = driver.findElement(By.xpath("//strong[contains(text(),'Community poll')]"));
js.executeScript("arguments[0].scrollIntoView();",element);
System.out.println(js.executeScript("return window.pageYOffset;"));

3 Scroll page till end of the page
----------------------------------
js.executeScript("window.scrollBy(0,document.body.scrollHeight)");
System.out.println(js.executeScript("return window.pageYOffset;"));

4 Scrolling up to initial position
--------------------------------------
js.executeScript("window.scrollBy(0,-document.body.scrollHeight)");
System.out.println(js.executeScript("return window.pageYOffset;"));

To handle the horizontal scroll -
-----------------------------------
we need to change - pageYOffset to pageXOffset
document.body.scrollHeight to document.body.scrollWidth


Zoom In and Zoom Out
======================
JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("document.body.style.zoom='50%'"); //set zoom level 50 %
Thread.sleep(5000);
js.executeScript("document.body.style.zoom='80%'"); //set zoom level 80 %


Upload the files
=================

single file upload
==================
driver.findElement(By.xpath("//input[@id='filesToUpload']")).sendKeys("C:\\Users\\amit1\\OneDrive\\Desktop\\Project\\Viva Solution.pdf");

multiple file upload - By using "\n" ex- (file1+"\n"+file2)
===================
String file1 = "C:\\Users\\amit1\\OneDrive\\Desktop\\Project\\Viva Solution.pdf";
String file2 = "C:\\Users\\amit1\\OneDrive\\Desktop\\Project\\Viva Solution1.pdf";

driver.findElement(By.xpath("//input[@id='filesToUpload']")).sendKeys(file1+"\n"+file2);




Day 38
========
Screenshots, Headless, SSL, Ad Block, Extensions
========================================================================================================================

How to capture Screenshot
=========================
TakesScreenshot ts = (TakesScreenshot) driver;

(1)full page
=================
File sourceFile = ts.getScreenshotAs(OutputType.FILE);
File targetFile = new File("C:\\Users\\amit1\\OneDrive\\Desktop\\Java\\TestNG\\src\\test\\java\\Selenium\\Screenshots_Headless_SSL_AdBlock_Extensions\\ScreenShot\\fullpage.png");
sourceFile.renameTo(targetFile); //Copy sourceFile to TargetFile


in source file screenshot will be take.in target file we will copy the sourceFile

(2)specific area of page
========================
WebElement featureProduct =driver.findElement(By.xpath("//div[@class=\"product-grid home-page-product-grid\"]"));
File sourceFile =  featureProduct.getScreenshotAs(OutputType.FILE);
File targetFile = new File("C:\\Users\\amit1\\OneDrive\\Desktop\\Java\\TestNG\\src\\test\\java\\Selenium\\Screenshots_Headless_SSL_AdBlock_Extensions\\ScreenShot\\featureProduct.png");
sourceFile.renameTo(targetFile); //Copy sourcefile to Targetfile

(3)Web element
==============
WebElement logo = driver.findElement(By.xpath("//div[@class='header-logo']//a//img"));
File sourceFile2 = logo.getScreenshotAs(OutputType.FILE);
File targetFile2 = new File("C:\\Users\\amit1\\OneDrive\\Desktop\\Java\\TestNG\\src\\test\\java\\Selenium\\Screenshots_Headless_SSL_AdBlock_Extensions\\ScreenShot\\logo.png");
sourceFile2.renameTo(targetFile2); //Copy sourceFile to TargetFile


ChromeOptions
EdgeOptions
FirefoxOptions
etc...........

By options classes We can control browser specific settings.

ChromeOptions
==============
1) HeadlessTesting
===================

ChromeOptions options = new ChromeOptions();
options.addArguments("--headless=new"); // setting for headless mode of execution

advantages :
---------------
1) we can do multiple tasks (since execution happened backend)
2) Faster execution

disadvantages :
-------------
1) user cannot see the action on the page. So he cannot understand flow/functionality of the test.

SSl Handling
============
Website : expired.badssl.com

ChromeOptions options = new ChromeOptions();
options.setAcceptInsecureCerts(true);

How to remove "Chrome is being controlled by automated test software"
=====================================================================
ChromeOptions options = new ChromeOptions();
options.setExperimentalOption("excludeSwitches",new String[] {"enable-automation"});

To run the tests in Incognito mode
==================================
ChromeOptions options = new ChromeOptions();
options.addArguments("--incognito");


Enable Extensions in browser also block the ads
====================================================

step 1 Add CRX Extractor/Downloader to chrome Browser (manually)
Step 2 Add SelectorsHub plugin to chrome browser (manually)
step 3 Capture crx file for selectorshub extension
Step 4 pass crx file path in automation script in Chrome Options

Ex :
ChromeOptions options = new ChromeOptions();
File file = new File("C:\\Users\\amit1\\OneDrive\\Desktop\\Java\\TestNG\\src\\test\\java\\CRX Extensions\\SelectorsHub-Chrome-Web-Store.crx");
File file2 = new File("C:\\Users\\amit1\\OneDrive\\Desktop\\Java\\TestNG\\src\\test\\java\\CRX Extensions\\uBlock-Origin-Chrome-Web-Store.crx");
options.addExtensions(file,file2);

How to block ads on the page
===========================
uBlock-Origin
AdBlocker.


Day 39
========
Handling Broken Links, SVG Elements, Shadow DOM
========================================================================================================================
Broken Links
=============

Broken Link is a link which does not have any resource on the server

1) Link href="https://xyz.com" --> should have  href attribute
2) https://xyz.com -- hit the url to the server --->then we will get the status code
https://xyz.com ---->Server----> status code

URL linkURL = new URL(hrefattvalue); // converted href value from string to URL format
HttpURLConnection connectionLinkURL = (HttpURLConnection) linkURL.openConnection(); // Open connection to the server
connectionLinkURL.connect();

3) status code >=400 broken link
status code <400 not a broken link


Shadow DOM(Document Object Model)
==================================

Website :https://dev.automationtesting.in/shadow-dom

Document =>Shadow host =>shadow root=>Element(=>Shadow host =>shadow root=>Element)
Xpath cannot handle shadow DOM elements
Only CSS can handle shadow DOM elements
Take help of selectorHub


//1)This Element is inside single shadow DOM.

SearchContext shadow = driver.findElement(By.cssSelector("#shadow-root")).getShadowRoot();
Thread.sleep(1000);
shadow.findElement(By.cssSelector("#shadow-element"));

//2)This Element is inside 2 nested shadow DOM.

SearchContext shadow0 = driver.findElement(By.cssSelector("#shadow-root")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow1 = shadow0.findElement(By.cssSelector("#inner-shadow-dom")).getShadowRoot();
Thread.sleep(1000);
shadow1.findElement(By.cssSelector("#nested-shadow-element"));

//3)This Element is inside 3 nested shadow DOM.

SearchContext shadow0 = driver.findElement(By.cssSelector("#shadow-root")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow1 = shadow0.findElement(By.cssSelector("#inner-shadow-dom")).getShadowRoot();
Thread.sleep(1000);
SearchContext shadow2 = shadow1.findElement(By.cssSelector("#nested-shadow-dom")).getShadowRoot();
Thread.sleep(1000);
shadow2.findElement(By.cssSelector("#multi-nested-shadow-element"));



Handle SVG Elements
====================

it is compulsory //*[name()='svg'] to find the svg element.
EX-

(//a[@class="oxd-main-menu-item"]//*[name()='svg'])[4]




Day 40
========
Data Driven Testing | Working with MS-Excel
========================================================================================================================

Apache POI
===========

Dependencies :- poi , poi-ooxml

Apache POI Common
Apache POI API Based On OPC and OOXML Schemas

Excel File ----> WorkBook ------>Sheets------->Rows---->Cells

FileInputStream - reading
FileOutputStream - writing


Classes - provided by Apache POI

XSSFWorkbook  - Workbook
XSSFSheet     - Sheet
XSSFRow       - Row
XSSFCell      - Cell

1) reading data from the excel
2) writing data in the excel

Day 41
========
Data Driven Testing with MS-Excel
========================================================================================================================
1) Functionality (Test Case)
2) Prepare test data in excel
3) develope automation script

Reading properties file
---------------------
xyz.properties

Assignment

https://www.cit.com/cit-bank/resources/calculators/certificate-of-deposit-calculator

Day-42
=========
TestNG Integration & Setup | @Test annotation
========================================================================================================================

TestNG -Test New Generation

java based unit testing tool.

Advantages:
-----
1) Test cases & test suites
2) Grouping of test cases.
3) Prioritize
4) Parameterization
5) parallel testing
6) Reports

TestNG configuration
-----------------
1) Install testng in eclipse
2) add testng library to build path / add testng dependency in pom.xml


@Test   - annotation

1) TestNG execute test methods based on alphabetical order.
2) @Test(priority=num)  controls the order of execution.
3) Once you provide priorty to the test methods, then order of methods is not considered.
4) priorities can be random numbers( no need to have consecutive numbers)
5) If you dont provide priority then default value is Zero (0).
6) If the priorities are same then again execute methods in alphabetical order.
7) Negitive values are allowed in priority.
8)  TestNG execute test methods only if they are having @Test annotation.

execute test cases using testng xml file

test xml file
------
1) generate automatically
2) manually


Test suite--->test cases----->test steps
xml file---->classes----> Test methods

2 things achived through xml
-------
1) executed group of test cases as a 1 suite
2) we can generate testng reports ( default)


Example testng.xml
----------------------

<suite name="All Test Suite">
    <test name="Test">
        <classes>
            <class name="Selenium.Topic16_TestNGIntegrationAndSetupTestAnnotation.OrangeHRMTest">
                <methods>
                    <include name="OpenApp"/>
                    <include name="Logo"/>
                    <include name="LogiN"/>
                    <include name="Logout"/>
                </methods>
            </class>
        </classes>
    </test>
</suite>


TestNG Annotations | Types Of Assertions


Day-43
=========
TestNG Annotations | Types Of Assertions
========================================================================================================================
@Test

@BeforeMethod
@AfterMethod

@BeforeClass
@AfterClass

@BeforeTest
@AfterTest

@BeforeSuite
@AfterSuite


TC1
---
1) Login ----->@BeforeMethod
2) Search -----> @Test
3) Logout----->@AfterMethod
4) Login
5) Adv Search-----> @Test
6) Logout


TC2
---
1) Login----->@BeforeClass
2) Search -----> @Test
3) Adv Search-----> @Test
4) Logout----->@AfterClass



<suite name="All Test Suite">
    <test name="Test1">
        <classes>
            <class name="xyz"></class>
        </classes>
    </test>

    <test name="Test2">
        <classes>
            <class name="abc"></class>
        </classes>
    </test>
</suite>


Assertions - Validation points
-----------------------------

2 Types of Assertions
--------------------------
1) Hard Assertions
2) Soft Assertions

 SoftAssert sa = new SoftAssert();
 SoftAssert is a class
 sa.assertEquals(1, 1); //soft assertion


in hard assertions if assertion got failed after that nothing will be execute.
in soft assertions if assertion got failed after that all will be execute.


Hard assertions
================
we can access from "Assert" class
methods are static
* if hard assertion failed then rest of the statements will not be executed.


soft assertion
==============
we can access though "SoftAssert"  object

SoftAssert sa=new SoftAssert();
sa.assertTrue()

if soft assertion got failed then rest of the statements still execute.


Day-44
=========
TestNG | Dependency Method | Grouping Tests
========================================================================================================================

Dependency Method :
-----------------

openApp
login
search
advSearch
logout

Syntax: dependsOnMethods = {"methodName1","methodName2","methodName3"}
Ex:
@Test(priority =4, dependsOnMethods = {"login","search"})


Grouping :
--------------

class1 - m1 m2 m3...
class2 - m4, m5 ,m6...
class3 -- m7,m8,m9....
---

sanity
regression
functional


loginByFacebook - sanity
loginByEmail  -sanity
loginByTwitter  -sanity

signupbyfacebook -regression
signupbytwitter  -regression
signupbyemail   - regression

paymentinrupees   - sanity, regression (functional)
paymentindollars   - sanity, regression  (functional)

1) all sanity tests
2) all regression tests
3) all sanity but not regression
4) all regression but not sanity
5) all methods which are belongs to both sanity & regression


<include name="Sanity"></include>
<exclude name="Regression"></exclude>

@Test
----
priority
dependsOnMethods
groups
etc....

Day-45
=========
TestNG | DataProviders | Parallel Testing
========================================================================================================================

parameterization :
----------------

1) @DataProvider
====================
Syntax of DataProvide :
-------------------------
    @DataProvider (name = "dp" , indices = {0,1})
    Object[][] loginData() {

        Object data[][] = {
                {"abc@gmail.com", "test123"},
                {"Amit19012014@gmail.com", "Amit@123"},
                {"xyz@gmail.com", "test012"},
                {"john@gmail.com", "test@123"},
                {"pavanol123@gmail.com", "test@123"},
                {"johncanedy@gmail.com", "test"}

        };
        return data;
    }

indices : it is use for to give a praticular data to the application

Use in @Test Annotation
@Test(dataProvider = "dp")

2) Using xml file ---> parallel testing
============================================
parallel testing using xml file
------------------------------

step1) created test case
step 2) create xml file then run test case through xml
step3 ) passed browser name, url as parameters from xml file to setup() method
step4 ) execute test case on chrome,firefox & Edge (serial execution)
step5 ) execute test case on chrome,firefox & edge ( parallel execution)


Day-46
=========
TestNG | Listeners | Extent Report Generation
========================================================================================================================

We can do the post action by using the listeners.

1) Create test case
2) create listener class
3) create xml file and include both test case & listeners class

onStart
onTestStart
onTestSuccess
onTestFailure
onTestSkipped
onFinish

2 ways to implement listener class
------------
Method1
------
class myListner implements ITestListener
{

}

Method2
-------------
class myListener extends TestListenerAdapter
{

}

to add a listeners class into a main class
"@Listeners(Selenium.Topic20_TestNGListenersExtentReportGeneration.MyListeners.class)"


Extent report
-------
ExtentSparkReporter
ExtentReports
ExtentTest


maven dependency
--------------------

<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
	<dependency>
	    <groupId>com.aventstack</groupId>
	    <artifactId>extentreports</artifactId>
	    <version>5.1.2</version>
	</dependency>


















