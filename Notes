Day - 9
--------------

Example : Reverse a string

String s= "welcome"
reverse string = emoclew

StringBufffer a =new StringBuffer("welcome");
StringBuilder a =new StringBuilder("welcome");

=============================================
 Immutable =  we cannot change. ex = String is a mutable.
 mutable = we can change.ex = StringBuffer & StringBuilder is immutable

String comparison
------------------
1) == equals()
2) String s = "welcome"
String s = new String("welcome")


Day - 10
--------------

OOPs Concepts
===============

object oriented programming
----------------------------

Class
Object
Polymorphism
Encapsulation
Inheritance
Data Abstraction


Class -A class is a collection of attributes and behaviour.
Class is a blueprint.

Animal(class) --> Dog,Elephant,Horse etc..
Student(class) --> Kim,David, Scott etc
Organization(class) --> john ,smith, mary

Object - Object is an instance of a class.

Class
--------
1) Class is collection of variables and methods.
2) class is logical entity/blueprint,
3) will not occupy space and memory.

Syntax:
class Employee{
variables
methods
}

Object
--------
1) Object is an instance of a class.
2) Object will be created by using a class.
3) Object is a physical entity.
4) occupy space in memory
5) We can create multiple object for single class.

Employee emp1 = new Employee();
Employee emp2= new Employee();
Employee emp3= new Employee();


Day 11
-------

Methods
-------
Block or group of statements which will perform certain task.
We have to call the methods through object.

1)No params  || No return value
2)No Params  || Return Value
3)Take params|| No return value
4)Take params|| Return value

String s = new String("welcome")
int len = s.length() // 2)No Params  || Return Value

String sub = s.substring(2,5)


How many ways we can store the data into variables?
==================================================
1) using object reference variables
2) using methods
3) Using a constructor

Difference b/w method and constructor.

Methods
------------
Method:
1) Method name can be anything
2) Method may or may not return a value
3) If method is not returning any value then specify void
4) Method can take parameters/arguments
5) We have to invoke/call methods explicitly through object
6) used for specifying logic

Constructor
------------
1) Constructor name should be same as class name.
2) Constructor will never return a value (not even void)
3) We don't specify the void
4) Constructor can take parameters/arguments
5) Constructor automatically invoked at the time of object creation.
6) used for initializing the values of the variables.
7. Constructor is use only for assigning the data
Types of Constructor
-------------------
Default Constructor
parameterized Constructor

Day 12
-------------
Polymorphism
-------------
Poly - many
morphism - forms

One thing can have many forms.

shape - circle, square, triangle, rectangle etc;
water - vapour, ice burgs etc;

We can achieve polymorphism using overloading.
It is applicable for methods and Constructors


Method Overloading
------------------
void m1()
void m1()
void m1()

4 rules are applicable
------------------------
1) Method name should be same
2) Number of parameter should be different
3) data type of parameter should be different
4) Order of parameter should be different

Encapsulation
----------------
Wrapping Up of data and methods into single unit(class).
1) All variable should be private
2) For every variable there should be 2 methods ( get & set )
3) Variables can be operated only through methods.



to set and get the value we will use getter and setter methods.
(this.variable name)  "this" keyword always represent the class
In encapsulation we can't access the variable directly. to access the variables we need to use get and set method.



Can we overload main() method?
-------------------------------
Yes we can overload main() method
public class MainMathodOverloading {
    void main(int x){
        System.out.println(x);
    }
    void main(String s){
        System.out.println(s);
    }
    void main(String s1,String s2)
    {
        System.out.println(s1+s2);
    }

    public static void main(String[] args) {

        MainMathodOverloading mo = new MainMathodOverloading();
        mo.main(100);
        mo.main("Amit");
        mo.main("Amit ","Singh");
    }
}

Usage of this and static keywords in
=======================================
this keyword - this keyword is always represents the class and objects

2 Types of variable
====================
1) class Variable / instance variable
2) Local variable


static keyword
----------------
Static keyword can be applied for variables and methods.

Static variables
Static methods

Non-Static variables
Non-Static Methods

1) Static method can access static stuff directly (without object).
2) Static method can access non-static stuff through the object.
3) Non-static methods can access everything directly

class Test()
{
static String s= "welcome"
}
Test.s.length


class System()
{
static Printstream out;
}
System.out.println();


JVM
1)
public static void main(String [] args ) // valid
{
}
2)
static public void main(String [] args )  // valid
{
}
3)
public void static main(String args[]) // Invalid
{
}
4)
void main (String args[]) public static //Invalid
{
}
5)
public static void main(int a[]) //valid
{
}

static public void main(String a[]) // valid - this is the method jvm look for
{
}

Day 14
========

Inheritance and Types of Inheritance
====================================

Inheritance
--------------

Acquiring all the properties (variables) & behaviours(methods) from one class to another class is called Inheritance.
By using Extend keyword.

Objective
----------
1)Re-usability
2) Avoid duplication

Types of Inheritance
--------------------
1) Single
2) multi level
3) hierarchy
4) multiple









